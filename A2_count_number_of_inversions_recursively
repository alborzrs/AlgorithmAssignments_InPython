#Download the following text file: IntegerArray.txt
#This file contains all of the 100,000 integers between 1 and 100,000 
#(inclusive) in some order, with no integer repeated.
# Your task is to compute the number of inversions in the file given, 
#where the  row of the file indicates the  entry of an array.

import math
def merge_and_count_split_inv(leftLst :list, rightLst:list) -> (list, int):
	"""
	returns a sorted list which is the result of merging the two sorted input\
	list. Also, returns the number of inversions which happen during the \
	merging process
	>>> merge_and_count_split_inv([1,3,5],[2,4,6])
	([1, 2, 3, 4, 5, 6], 3)
	>>> merge_and_count_split_inv([9,8,7,1],[2,4,6])
	([2, 4, 6, 9, 8, 7, 1], 12)
	"""
	sortedLst=[]
	i=0
	j=0
	count_split=0
	# we set two counters, i and j, to go through the left and right input\
	# lists and compare their items one by one
	while (i<len(leftLst) and j<len(rightLst)):
		if leftLst[i]< rightLst[j]:
			sortedLst.append(leftLst[i]) #the item from the left list will\
			#be the next item to be added to the output sorted list
			i=i+1
		else:
			sortedLst.append(rightLst[j]) #the item from the right list will\
			#be the next item to be added to the output sorted list
			j=j+1
			count_split=count_split+len(leftLst)-i # the number of inversions\
			#will be increased by the remaing number of items in the left list
	if i==len(leftLst): #when we reach to the end of the left list
		return (sortedLst+rightLst[j:], count_split)
	if j==len(rightLst): #when we reach to the end of the right list
		return (sortedLst+leftLst[i:], count_split)

def sort_and_count(inpLst: list)-> (list,int):
	"""
	Recursively computes the number of inversions required to sort inpLst.\
	Also, returns the sorted version of inpLst.
	>>> sort_and_count([12,3,4,1,9,7,6,5,2,11,10,8])
	([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 29)
	>>> sort_and_count([3,4,7,1,2,6,5])
	([1, 2, 3, 4, 5, 6, 7], 9)
	"""
	if len(inpLst)==1:
		return (inpLst,0)
	(sortedLeft, count_left)= sort_and_count\
	(inpLst[0:math.floor(len(inpLst)/2)]) #recursively sort and\ 
	#count the number of inversions in the left side of the input list
	(sortedRight, count_right)= sort_and_count\
	(inpLst[math.floor(len(inpLst)/2):])#recursively sort and\ 
	#count the number of inversions in the right side of the input list
	(sortedInpLst, count_split)= merge_and_count_split_inv\
	(sortedLeft,sortedRight)#counting the number of\
	#inversions during the merging process
	count_total=count_left+count_right+count_split
	return sortedInpLst, count_total

def num_of_invers(fileName: str) -> (list, int):
	"""
	same as sort_and_count function, but the input is a file name
	"""
	fhandle=open(fileName,'r')
	lstInteg=[]
	for line in fhandle:	
		lstInteg.append(int(line))
	return sort_and_count(lstInteg)

if __name__ == "__main__":
    import doctest
    doctest.testmod()
	
fileName='IntegerArray.txt'
(sortedArray, num_inversions)=num_of_invers(fileName)
print ('number of inversions in %s is %d' %(fileName, num_inversions))

